import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import linregress

# === INPUT CLEANED FILE ===
input_file = r"C:\Users\admins\Desktop\BAH files\AL1_ASW91_L2_TH1_20240828_UNP_9999_999999_V02_CLEANED.xlsx"
output_file = input_file.replace(".xlsx", "_DERIVED.xlsx")

# === Load Data ===
epoch = pd.read_excel(input_file, sheet_name="epoch_for_cdf_mod")
flux_total = pd.read_excel(input_file, sheet_name="integrated_flux_mod")
s9 = pd.read_excel(input_file, sheet_name="integrated_flux_s9_mod")
s10 = pd.read_excel(input_file, sheet_name="integrated_flux_s10_mod")
s11 = pd.read_excel(input_file, sheet_name="integrated_flux_s11_mod")
energy_center = pd.read_excel(input_file, sheet_name="energy_center_mod")

# === Convert CDF epoch to datetime ===
def convert_epoch_to_datetime(epoch_series):
    base = datetime(1, 1, 1)
    return [base + timedelta(milliseconds=ms) for ms in epoch_series.squeeze()]

time_utc = convert_epoch_to_datetime(epoch)
df_out = pd.DataFrame({'UTC': time_utc})

# === Derived Metrics ===

# 1. Peak Flux Across Energy Channels
df_out["peak_flux"] = flux_total.max(axis=1)

# 2. Mean Flux
df_out["mean_flux"] = flux_total.mean(axis=1)

# 3. dF/dt (temporal change of mean flux)
df_out["d_flux_dt"] = df_out["mean_flux"].diff().fillna(0)

# 4. Energy-Integrated Flux = Σ(E × F)
energy_array = energy_center.iloc[0].values
df_out["energy_integrated_flux"] = (flux_total * energy_array).sum(axis=1)

# 5. Anisotropy Index (std deviation across directional sectors)
sector_stack = pd.concat([s9, s10, s11], axis=1)
df_out["anisotropy_index"] = sector_stack.std(axis=1)

# 6. Spectral Slope (log-log linear regression: log(F) vs log(E))
slopes = []
for i in range(len(flux_total)):
    try:
        flux_row = flux_total.iloc[i].values + 1e-6  # avoid log(0)
        log_e = np.log10(energy_array + 1e-6)
        log_f = np.log10(flux_row)
        slope, _, _, _, _ = linregress(log_e, log_f)
        slopes.append(slope)
    except Exception:
        slopes.append(np.nan)

df_out["spectral_slope"] = slopes

# === Save to Excel ===
with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    df_out.to_excel(writer, sheet_name="Derived_Metrics", index=False)

print(f"\n✅ Derived metrics successfully saved to:\n{output_file}")
